name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check code formatting
        run: |
          echo "üé® Checking code formatting"
          cargo fmt -- --check

  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-clippy-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy lints
        run: |
          echo "üîç Running clippy lints"
          cargo clippy -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-test-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Download test model
        run: |
          echo "üì¶ Setting up test model"
          mkdir -p ~/.cache/models/gguf
          # Note: Tests expect GPT-2 model at standard path
          # If model doesn't exist, tests will be skipped or fail gracefully

      - name: Run test suite
        run: |
          echo "üß™ Running all tests (30 total)"
          cargo test --verbose

  build:
    name: Build Verification
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-build-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build library
        run: |
          echo "üî® Building shimmytok on ${{ matrix.os }}"
          cargo build --release --verbose

      - name: Verify library builds
        run: |
          echo "‚úÖ Build successful on ${{ matrix.os }}"
